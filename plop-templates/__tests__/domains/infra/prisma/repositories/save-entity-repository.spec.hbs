import { {{pascalCase name}} } from '@/domains/{{dashCase name}}/entities';
import { PrismaSave{{pascalCase name}}Repository } from '@/domains/{{dashCase name}}/infra/prisma/repositories';
import { prismaConnector } from '@/shared/infra/prisma/index';

import { {{pascalCase name}}Factory } from '@/tests/domains/{{dashCase name}}/entities';
import { PrismaClient } from '@prisma/client';

const makeSut = () => {
  const sut = new PrismaSave{{pascalCase name}}Repository();

  return {
    sut,
  };
}

describe('Prisma Save {{pascalCase name}} Repository', () => {
  let prismaTest: PrismaClient | null = null;
  beforeAll(async () => {
    prismaTest = prismaConnector.connect(process.env.DATABASE_TEST_URL);

    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
    }
  });

  afterEach(async () => {
    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
    }
  });

  afterAll(async () => {
    if (prismaTest) {
      await prismaTest.$disconnect();
    }
  });

  it('should create a {{camelCase name}}', async () => {
    const { sut } = makeSut();

    const fake{{pascalCase name}} = {{pascalCase name}}Factory.build({ enabled: true });

    const {{camelCase name}}Created = await sut.save(fake{{pascalCase name}});

    const expectedResult = new {{pascalCase name}}({
      ...fake{{pascalCase name}},
      id: {{camelCase name}}Created.id,
      createdAt: {{camelCase name}}Created.createdAt,
      updatedAt: {{camelCase name}}Created.updatedAt,
    });

    expect({{camelCase name}}Created).toStrictEqual(expectedResult);
  });
});
