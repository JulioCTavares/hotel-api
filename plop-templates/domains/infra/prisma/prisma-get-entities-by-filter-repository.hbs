import { {{pascalCase name}} as {{pascalCase name}}Model, PrismaClient } from '@prisma/client';

import { IGet{{pascalCase name}}sByFilterRepository } from '@/domains/{{dashCase name}}/usecases/repos';
import { {{pascalCase name}} } from '@/domains/{{dashCase name}}/entities';

import { convertNullToUndefined } from '@/shared/helpers';

import {
  prismaConnector,
  PrismaFormatter,
  PrismaException,
} from '@/shared/infra/prisma';

export class PrismaGet{{pascalCase name}}sByFilterRepository
  implements IGet{{pascalCase name}}sByFilterRepository {
  private prismaConnection: PrismaClient;

  constructor() {
    this.prismaConnection = prismaConnector.connect();
  }

  async get(
    filter: IGet{{pascalCase name}}sByFilterRepository.Params,
  ): Promise<IGet{{pascalCase name}}sByFilterRepository.Result> {
    try {
      const {
        orderBy,
        pagination,
        filters,
      } = filter;

      const filtersFormated = PrismaFormatter.formatFilter(filters);

      const {{camelCase name}}DTOs = await this.prismaConnection.{{camelCase name}}.findMany({
        where: {
          ...filtersFormated,
          enabled: filters.enabled ?? true,
        },
        orderBy: { [orderBy.property]: orderBy.mode },
        take: pagination.take,
        skip: pagination.skip,
      });

      const {{camelCase name}}s = {{camelCase name}}DTOs.map(({{camelCase name}}DTO) => {
        return new {{pascalCase name}}(convertNullToUndefined<{{pascalCase name}}Model>({{camelCase name}}DTO));
      });

      return {{camelCase name}}s;
    } catch (error) {
      throw new PrismaException(error);
    }
  }
}
