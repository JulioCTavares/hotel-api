import {
  ISave{{pascalCase name}}Repository,
  IGet{{pascalCase name}}ByNameRepository,
} from '@/domains/{{dashCase name}}/usecases/repos';
import {
  {{pascalCase name}}AlreadyExistsException,
} from '@/domains/{{dashCase name}}/usecases/exceptions';
import {
  Create{{pascalCase name}}Controller,
} from '@/domains/{{dashCase name}}/interface/controllers';

import {
  HttpController,
  HttpResponse,
} from '@/shared/interface/http/protocols';
import { ValidationException } from '@/shared/helpers';
import { Validation } from '@/shared/interface/validation/protocols';
import { badRequest, created, serverError } from '@/shared/interface/http/helpers';
import { ILoggerLocal, IUuidGenerator } from '@/shared/protocols';

export interface HttpCreate{{pascalCase name}}Request {
  name: string;
}

export class HttpCreate{{pascalCase name}}Controller implements HttpController {
  private controller: Create{{pascalCase name}}Controller;
  private logger: ILoggerLocal;

  constructor(
    get{{pascalCase name}}ByNameRepository: IGet{{pascalCase name}}ByNameRepository,
    save{{pascalCase name}}Repository: ISave{{pascalCase name}}Repository,
    uuidGenerator: IUuidGenerator,
    validation: Validation,
    logger: ILoggerLocal,
  ) {
    this.controller = new Create{{pascalCase name}}Controller(
      get{{pascalCase name}}ByNameRepository,
      save{{pascalCase name}}Repository,
      uuidGenerator,
      validation,
      logger,
    );

    this.logger = logger.child({ httpController: 'create-{{dashCase name}}' });
  }

  async handle(httpRequest: HttpCreate{{pascalCase name}}Request): Promise<HttpResponse> {
    this.logger.logDebug({ message: 'Request Received', data: httpRequest });

    const { name } = httpRequest;

    try {
      const {{camelCase name}}Created = await this.controller.execute({
        name,
      });

      this.logger.logDebug({
        message: '{{pascalCase name}} created',
        data: {{camelCase name}}Created,
      });

      return created({{camelCase name}}Created);
    } catch (error) {
      if (error instanceof ValidationException) {
        return badRequest(error);
      }

      if (error instanceof {{pascalCase name}}AlreadyExistsException) {
        return badRequest(error);
      }

      return serverError(error as Error);
    }
  }
}
