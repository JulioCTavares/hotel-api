import {
  I{{pascalCase feature}}Repository,
} from '@/domains/{{dashCase entity}}/usecases/repos';
import {
  {{pascalCase feature}}Controller,
} from '@/domains/{{dashCase entity}}/interface/controllers';
import {
  HttpController,
  HttpResponse,
} from '@/shared/interface/http/protocols';
import { Validation } from '@/shared/interface/validation/protocols';
import { badRequest, ok, serverError } from '@/shared/interface/http/helpers';
import { ValidationException } from '@/shared/helpers';
import { ILoggerLocal, IUuidGenerator } from '@/shared/protocols';

export interface Http{{pascalCase feature}}Request {

}

export class Http{{pascalCase feature}}Controller implements HttpController {
  private controller: {{pascalCase feature}}Controller;
  private logger: ILoggerLocal;

  constructor(
    {{camelCase feature}}Repository: I{{pascalCase feature}}Repository,
    uuidGenerator: IUuidGenerator,
    validation: Validation,
    logger: ILoggerLocal
  ) {
    this.controller = new {{pascalCase feature}}Controller(
      {{camelCase feature}}Repository,
      uuidGenerator,
      validation,
      logger
    );

    this.logger = logger.child({ httpController: '{{dashCase feature}}'});
  }

  async handle(httpRequest: Http{{pascalCase feature}}Request): Promise<HttpResponse> {
    this.logger.logDebug({ message: 'Request Received', data: httpRequest });

    const { } = httpRequest;

    try {
      const {{camelCase entity}}Made = await this.controller.execute({ });

      this.logger.logDebug({
        message: '{{pascalCase entity}} made',
        data: {{camelCase entity}}Made,
      });

      return ok({{camelCase entity}}Made);
    } catch (error) {
      if (error instanceof ValidationException) {
        return badRequest(error);
      }

      return serverError(error as Error);
    }
  }
}
