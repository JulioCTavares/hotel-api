// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  birthDate DateTime? @map("birth_date")
  phone     String?
  city      String?
  state     String?
  country   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  bookings  Booking[]

  @@map("users")
}

model Booking {
  id            String   @id @default(uuid())
  roomNumber    Int      @map("room_number")
  bookingAmount Float    @map("booking_amount")
  bookingDate   DateTime @default(now()) @map("booking_date")
  startDate     DateTime @map("start_date")
  endDate       DateTime @map("end_date")
  status        String
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  Hotel         Hotel?   @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  hotelId       String?  @map("hotel_id")

  @@index([userId])
  @@index([hotelId])
  @@map("bookings")
}

model Hotel {
  id        String    @id @default(uuid())
  name      String
  city      String
  state     String
  country   String
  bookings  Booking[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("hotel")
}
